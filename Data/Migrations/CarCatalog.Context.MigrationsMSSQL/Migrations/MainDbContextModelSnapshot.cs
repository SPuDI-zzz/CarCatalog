// <auto-generated />
using System;
using CarCatalog.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CarCatalog.Context.MigrationsMSSQL.Migrations
{
    [DbContext(typeof(MainDbContext))]
    partial class MainDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CarCatalog.Context.Entities.CarBodyType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("car_body_types", (string)null);
                });

            modelBuilder.Entity("CarCatalog.Context.Entities.CarConfiguration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<float>("EngineCapasity")
                        .HasColumnType("real");

                    b.Property<int>("HorsePower")
                        .HasColumnType("int");

                    b.Property<int?>("IdCarBodyType")
                        .HasColumnType("int");

                    b.Property<int?>("IdCarDriveType")
                        .HasColumnType("int");

                    b.Property<int?>("IdCarEgineType")
                        .HasColumnType("int");

                    b.Property<int?>("IdCarGeneration")
                        .HasColumnType("int");

                    b.Property<int?>("IdCarTransmission")
                        .HasColumnType("int");

                    b.Property<bool>("LeftHandWheel")
                        .HasColumnType("bit");

                    b.Property<int>("Trunk")
                        .HasColumnType("int");

                    b.Property<Guid>("Uid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("IdCarBodyType");

                    b.HasIndex("IdCarDriveType");

                    b.HasIndex("IdCarEgineType");

                    b.HasIndex("IdCarGeneration");

                    b.HasIndex("IdCarTransmission");

                    b.HasIndex("Uid")
                        .IsUnique();

                    b.ToTable("car_configurations", (string)null);
                });

            modelBuilder.Entity("CarCatalog.Context.Entities.CarDriveType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("car_drive_types", (string)null);
                });

            modelBuilder.Entity("CarCatalog.Context.Entities.CarEgineType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("car_engine_types", (string)null);
                });

            modelBuilder.Entity("CarCatalog.Context.Entities.CarForSale", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Color")
                        .HasColumnType("int");

                    b.Property<int?>("IdCarConfiguration")
                        .HasColumnType("int");

                    b.Property<int>("Mileage")
                        .HasColumnType("int");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<Guid>("Uid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("IdCarConfiguration");

                    b.HasIndex("Uid")
                        .IsUnique();

                    b.ToTable("car_for_sales", (string)null);
                });

            modelBuilder.Entity("CarCatalog.Context.Entities.CarGeneration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("IDCarModel")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("Uid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("YearBegin")
                        .HasColumnType("int");

                    b.Property<int>("YearEnd")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IDCarModel");

                    b.HasIndex("Uid")
                        .IsUnique();

                    b.ToTable("car_generations", (string)null);
                });

            modelBuilder.Entity("CarCatalog.Context.Entities.CarMark", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("IdCountry")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("Uid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("IdCountry");

                    b.HasIndex("Uid")
                        .IsUnique();

                    b.ToTable("car_marks", (string)null);
                });

            modelBuilder.Entity("CarCatalog.Context.Entities.CarModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Class")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("IdCarMark")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("Uid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("IdCarMark");

                    b.HasIndex("Uid")
                        .IsUnique();

                    b.ToTable("car_models", (string)null);
                });

            modelBuilder.Entity("CarCatalog.Context.Entities.CarTransmission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("car_transmissions", (string)null);
                });

            modelBuilder.Entity("CarCatalog.Context.Entities.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("IdCarForSale")
                        .HasColumnType("int");

                    b.Property<int?>("IdUser")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdCarForSale");

                    b.HasIndex("IdUser");

                    b.ToTable("comments", (string)null);
                });

            modelBuilder.Entity("CarCatalog.Context.Entities.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("countries", (string)null);
                });

            modelBuilder.Entity("CarCatalog.Context.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("Date");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<Guid>("Uid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("Uid")
                        .IsUnique();

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("CarCatalog.Context.Entities.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("user_roles", (string)null);
                });

            modelBuilder.Entity("CarForSaleUser", b =>
                {
                    b.Property<int>("CarForSalesId")
                        .HasColumnType("int");

                    b.Property<int>("UsersId")
                        .HasColumnType("int");

                    b.HasKey("CarForSalesId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("favorites", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("user_role_claims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("user_claims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("user_logins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("user_role_owners", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("user_tokens", (string)null);
                });

            modelBuilder.Entity("CarCatalog.Context.Entities.CarConfiguration", b =>
                {
                    b.HasOne("CarCatalog.Context.Entities.CarBodyType", "CarBodyType")
                        .WithMany("CarConfigurations")
                        .HasForeignKey("IdCarBodyType");

                    b.HasOne("CarCatalog.Context.Entities.CarDriveType", "CarDriveType")
                        .WithMany("CarConfigurations")
                        .HasForeignKey("IdCarDriveType");

                    b.HasOne("CarCatalog.Context.Entities.CarEgineType", "CarEgineType")
                        .WithMany("CarConfigurations")
                        .HasForeignKey("IdCarEgineType");

                    b.HasOne("CarCatalog.Context.Entities.CarGeneration", "CarGeneration")
                        .WithMany("CarConfigurations")
                        .HasForeignKey("IdCarGeneration");

                    b.HasOne("CarCatalog.Context.Entities.CarTransmission", "CarTransmission")
                        .WithMany("CarConfigurations")
                        .HasForeignKey("IdCarTransmission");

                    b.Navigation("CarBodyType");

                    b.Navigation("CarDriveType");

                    b.Navigation("CarEgineType");

                    b.Navigation("CarGeneration");

                    b.Navigation("CarTransmission");
                });

            modelBuilder.Entity("CarCatalog.Context.Entities.CarForSale", b =>
                {
                    b.HasOne("CarCatalog.Context.Entities.CarConfiguration", "CarConfiguration")
                        .WithMany("CarForSales")
                        .HasForeignKey("IdCarConfiguration");

                    b.Navigation("CarConfiguration");
                });

            modelBuilder.Entity("CarCatalog.Context.Entities.CarGeneration", b =>
                {
                    b.HasOne("CarCatalog.Context.Entities.CarModel", "CarModel")
                        .WithMany("CarGenerations")
                        .HasForeignKey("IDCarModel");

                    b.Navigation("CarModel");
                });

            modelBuilder.Entity("CarCatalog.Context.Entities.CarMark", b =>
                {
                    b.HasOne("CarCatalog.Context.Entities.Country", "Country")
                        .WithMany("CarMarks")
                        .HasForeignKey("IdCountry");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("CarCatalog.Context.Entities.CarModel", b =>
                {
                    b.HasOne("CarCatalog.Context.Entities.CarMark", "CarMark")
                        .WithMany("CarModels")
                        .HasForeignKey("IdCarMark");

                    b.Navigation("CarMark");
                });

            modelBuilder.Entity("CarCatalog.Context.Entities.Comment", b =>
                {
                    b.HasOne("CarCatalog.Context.Entities.CarForSale", "CarForSale")
                        .WithMany("Comments")
                        .HasForeignKey("IdCarForSale");

                    b.HasOne("CarCatalog.Context.Entities.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("IdUser");

                    b.Navigation("CarForSale");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CarForSaleUser", b =>
                {
                    b.HasOne("CarCatalog.Context.Entities.CarForSale", null)
                        .WithMany()
                        .HasForeignKey("CarForSalesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarCatalog.Context.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("CarCatalog.Context.Entities.UserRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("CarCatalog.Context.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("CarCatalog.Context.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("CarCatalog.Context.Entities.UserRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarCatalog.Context.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("CarCatalog.Context.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CarCatalog.Context.Entities.CarBodyType", b =>
                {
                    b.Navigation("CarConfigurations");
                });

            modelBuilder.Entity("CarCatalog.Context.Entities.CarConfiguration", b =>
                {
                    b.Navigation("CarForSales");
                });

            modelBuilder.Entity("CarCatalog.Context.Entities.CarDriveType", b =>
                {
                    b.Navigation("CarConfigurations");
                });

            modelBuilder.Entity("CarCatalog.Context.Entities.CarEgineType", b =>
                {
                    b.Navigation("CarConfigurations");
                });

            modelBuilder.Entity("CarCatalog.Context.Entities.CarForSale", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("CarCatalog.Context.Entities.CarGeneration", b =>
                {
                    b.Navigation("CarConfigurations");
                });

            modelBuilder.Entity("CarCatalog.Context.Entities.CarMark", b =>
                {
                    b.Navigation("CarModels");
                });

            modelBuilder.Entity("CarCatalog.Context.Entities.CarModel", b =>
                {
                    b.Navigation("CarGenerations");
                });

            modelBuilder.Entity("CarCatalog.Context.Entities.CarTransmission", b =>
                {
                    b.Navigation("CarConfigurations");
                });

            modelBuilder.Entity("CarCatalog.Context.Entities.Country", b =>
                {
                    b.Navigation("CarMarks");
                });

            modelBuilder.Entity("CarCatalog.Context.Entities.User", b =>
                {
                    b.Navigation("Comments");
                });
#pragma warning restore 612, 618
        }
    }
}
